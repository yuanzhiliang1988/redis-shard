#Persisted by DefaultConfig
#Thu Sep 02 20:35:16 CST 2021
ebike.geo.url=/qconf_root/number7/ebike-geo_dev
spring.datasource.druid.stat-view-servlet.login-username=admin
perf.redis.two.host=10.100.71.180
spring.kafka.consumer.group.id.bike.op.move.event=geo-zike-op-move-event
perf.redis.two.jedis.pool.max-active=10
perf.datasource.enabled=true
kafka.topic.ebike.geo.action.caused.event=geo-action-caused-event
kafka.topic.lbs.biz.event=lbs-biz-event-dev
baidu.lbs.geoTableId=173381
redis.shard.nodes[0].gray=true
perf.redis.enabled=true
spring.redis.host=10.9.188.145
spring.datasource.druid.min-idle=5
perf.redis.one.port=6379
crossdomain.hosts=https\://dev-s.xiaohuali.com,http\://dev-s.xiaohuali.com
pay.gateway.url=http\://test.gateway.pay.xiaohuali.com
ebike.engine.url=/qconf_root/number7/engine_dev
redis.shard.nodes[3].addresses=10.9.188.145\:6379
spring.kafka.consumer.group.id.bike.lock=geo-zike-bike-lock
redis.shard.jedis.pool.max-total=11
perf.redis.one.jedis.pool.max-active=10
spring.zipkin.kafka.bootstrap-servers=kafka01.dev.in.songguo7.com\:9092,kafka02.dev.in.songguo7.com\:9092,kafka03.dev.in.songguo7.com\:9092
ebike.api.client.key=e288359803f58171f0cbc6716c818a94
baidu.ak=fEPHlD6ckqGPZsnmtYSLHVeMIRqjor9F
bigdata.host=http\://10.9.188.187\:23456
perf.datasource.druid.max-wait=2000
redis.shard.listener.enabled=true
hbase.zookeeper.property.clientPort=2181
spring.kafka.producer.interceptor.class=com.ttyc.ebike.shadow.kafka.KafkaProducerIntercepter
redis.shard.jedis.pool.read-timeout=3000
ebike.client.key=30346876b3f45bab965823b9aa64a1a4
perf-monitor={\n    "department"\:"lbs",\n    "appName"\:"geo-zike",\n    "env"\:"dev",\n    "startup"\:true,\n    "secret"\:"SEC0e2e5746d963b03f65c33c5ada9809016c3313cb3af68baf494a3d96cdbb7b0a",\n    "url"\:"https\://oapi.dingtalk.com/robot/send?access_token\=73b8f4101425e74aa36914deb5222f312b91adea63503582a5dbb1ac5d928c7e",\n    "duties"\:[\n        {\n            "phones"\:"18611368264"\n        }\n    ],\n    "alarmRules"\:[\n        {\n            "namespace"\:"http.success",\n            "value"\:800,\n            "comparator"\:"gt",\n            "type"\:"max"\n        },\n        {\n            "namespace"\:"api.success",\n            "value"\:800,\n            "comparator"\:"gt",\n            "type"\:"max"\n        },\n        {\n            "namespace"\:"sql.query.success",\n            "value"\:800,\n            "comparator"\:"gt",\n            "type"\:"max"\n        },\n        {\n            "namespace"\:"redis.success",\n            "value"\:500,\n            "comparator"\:"gt",\n            "type"\:"max"\n        },\n        {\n            "namespace"\:"kafka.consume",\n            "value"\:1500,\n            "comparator"\:"gt",\n            "type"\:"max"\n        },\n        {\n            "namespace"\:"http.fail",\n            "value"\:1,\n            "comparator"\:"ge",\n            "type"\:"count"\n        },\n        {\n            "namespace"\:"api.fail",\n            "value"\:1,\n            "comparator"\:"ge",\n            "type"\:"count"\n        },\n        {\n            "namespace"\:"sql.query.fail",\n            "value"\:1,\n            "comparator"\:"ge",\n            "type"\:"count"\n        },\n        {\n            "namespace"\:"redis.fail",\n            "value"\:1,\n            "comparator"\:"ge",\n            "type"\:"count"\n        },\n        {\n            "namespace"\:"jvm.gc.collectionCount",\n            "tags"\:{\n                "name"\:"ConcurrentMarkSweep"\n            },\n            "value"\:2,\n            "comparator"\:"ge",\n            "type"\:"value"\n        },\n        {\n            "namespace"\:"jvm.gc.collectionCount",\n            "tags"\:{\n                "name"\:"ParNew"\n            },\n            "value"\:40,\n            "comparator"\:"ge",\n            "type"\:"value"\n        },\n        {\n            "namespace"\:"jvm.threads.states",\n            "tags"\:{\n                "state"\:"blocked"\n            },\n            "value"\:2,\n            "comparator"\:"ge",\n            "type"\:"value"\n        },\n        {\n            "namespace"\:"executor.queued",\n            "value"\:2000,\n            "comparator"\:"gt",\n            "type"\:"value"\n        },\n        {\n            "namespace"\:"system.cpu.usage",\n            "value"\:80,\n            "comparator"\:"gt",\n            "type"\:"value"\n        }\n    ]\n}
env=dev
kafka.topic.bike.lock.event=ebike_lock_dev
pay.gateway.timeout.sec=420
perf.redis.two.port=6379
spring.cloud.nacos.discovery.server-addr=10.100.101.20\:8848
notice.push_prefix="ttpinecone"
redis.shard.nodes[4].addresses=10.100.102.27\:6380
perf.datasource.druid.min-idle=5
order.info.update.at.geozike=1
perf.redis.two.jedis.pool.max-wait=2s
gps.store.host=http\://172.16.100.105\:4242
redis.shard.nodes[0].addresses=10.9.198.84\:6379
perf.redis.one.jedis.pool.max-wait=2s
qconf.city.config.url=/qconf_root/songguo7/city-config_dev
perf.datasource.password=OClgaa6YD\!Rylnb5
notice.from=songguo7_engine
notice.url=http\://10.9.188.187\:12800/
redis.shard.config.key-regex[3]=(test2_4)
pay.goods_name=\\u677E\\u679C\\u7535\\u5355\\u8F66\\u8BA2\\u5355
perf.redis.one.jedis.pool.min-idle=5
spring.redis.port=6380
spring.cloud.nacos.discovery.namespace=84663e76-f64a-4331-a3a6-efd26ead7bf1
spring.datasource.druid.url=jdbc\:mysql\://10.9.198.84\:3306/ebike_geo?characterEncoding\=utf-8&connectTimeout\=20000&socketTimeout\=20000&zeroDateTimeBehavior\=convertToNull
redis.shard.nodes[3].double-writer=false
redis.shard.jedis.pool.test-while-idle=true
system=songguo
spring.datasource.druid.initial-size=5
ebike.client.id=ebike
perf.datasource.druid.initial-size=5
qconf.sbz.newton.url=/qconf_root/songguo7/sbz/newton_dev
perf.redis.two.jedis.pool.min-idle=5
perf.datasource.driver-class-name=com.mysql.jdbc.Driver
perf.redis.two.database=1
spring.datasource.druid.password=ttyongche@2014
kafka.topic.ebike.data.store=ebike_data_store_dev
zookeeper.znode.parent=/hbase
php.url=/qconf_root/number7/phpapi_dev
perf.datasource.username=ttyc_56_3306
redis.shard.config.key-regex[2]=(test2_3)
notice.appid=520680
perf.datasource.url=jdbc\:mysql\://10.100.73.70\:3306/ebike_geo?serverTimezone\=Asia/Shanghai&useUnicode\=true&charaterEncoding\=utf-8&autoReconnect\=true&connectTimeout\=1000&socketTimeout\=20000&zeroDateTimeBehavior\=convertToNull&useSSL\=false
spring.datasource.druid.username=ttyc
perf.kafka.enabled=false
redis.shard.jedis.pool.max-wait=2000
redis.shard.nodes[1].addresses=10.100.102.27\:6379
redis.shard.nodes[1].password=PiC8Ou_mZSU7
kafka.topic.op.move.event=op_move_event_dev
spring.kafka.consumer.group.id.geo.action.caused.event=geo-zike-geo-action-caused-event
spring.kafka.bootstrap-servers=kafka01.dev.in.songguo7.com\:9092,kafka02.dev.in.songguo7.com\:9092,kafka03.dev.in.songguo7.com\:9092
redis.shard.config.serializer=jdk
perf.redis.one.host=10.100.71.180
spring.redis.database=0
hbase.zookeeper.quorum=10.9.190.108,10.9.193.69,10.9.165.122
spring.cloud.nacos.discovery.password=UMzXgF1PxFG2
spring.kafka.consumer.group.id.bike.status.change=geo-zike-bike-status-change
spring.datasource.druid.max-active=10
qconf.sbz.ebike.athena.url=/qconf_root/songguo7/sbz/athena_dev/
spring.main.allow-bean-definition-overriding=true
redis.shard.jedis.pool.test-on-return=false
redis.shard.config.key-regex[1]=(test2_2)
notice.template_lock.sms=\\u677E\\u679C\\u7535\\u5355\\u8F66\\u63D0\\u793A\\uFF1A\\u5982\\u5728\\u7528\\u8F66\\u8FC7\\u7A0B\\u4E2D\\u9700\\u8981\\u6682\\u65F6\\u79BB\\u5F00\\u8F66\\u8F86\\uFF0C\\u8BF7\\u4F7F\\u7528\\u4E34\\u65F6\\u9501\\u8F66\\u529F\\u80FD\\uFF0C\\u4EE5\\u514D\\u56E0\\u8F66\\u8F86\\u4E22\\u5931\\u627F\\u62C5\\u8D54\\u507F\\u8D23\\u4EFB\\u3002
spring.cloud.nacos.discovery.username=lbs_dev_nacos
redis.shard.jedis.pool.connect-timeout=2600
spring.datasource.druid.stat-view-servlet.login-password=admin
redis.shard.jedis.pool.min-idle=5
spring.redis.jedis.pool.max-wait=5000
geo.info.double.write=1
domain=http\://dev-engine.xiaohuali.com/ebike
baidu.yingyan.serviceId=147034
perf.redis.one.password=BNqFS7hK2M-s
perf.datasource.druid.max-active=10
ebike.api.client.id=php_ebike_callback
perf.redis.two.password=BNqFS7hK2M-s
ebike.api.host=http\://dev-api.xiaohuali.com
redis.shard.nodes[4].password=PiC8Ou_mZSU7
redis.shard.nodes[2].addresses=10.9.198.84\:6380
spring.datasource.druid.max-wait=2000
redis.shard.config.key-regex[0]=(test_)
kafka.consumer.num=2
kafka.topic.ebike.status.change.event=bike-status-change-event-dev
redis.shard.enabled=true
redis.shard.jedis.pool.test-on-borrow=true
spring.redis.jedis.pool.max-idle=50
cors.url=xiaohuali.com
